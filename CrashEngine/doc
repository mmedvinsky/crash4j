http://www.moparisthebest.com/smf/index.php?topic=216985.0

Need to investigate native methods and byte code generation.
In JDK 1.6 we can prefix the native functions and apply wrappers to them. 

Can attach to the Thread class to spawn the agent if premain is not a good place to do that.

java.io

java.io.File:

1. canRead, canWrite, exists, isDirecotry, isFile, isHidden 
    - Can return false if the file does not exists.  This can happen if the volume is gone.    
    - Can throw security exception if access to the file is denied.
2. lastModified, length, setLastModified, setReadOnly
	- Can return 0 or an IOError if the file does not exist
3. createNewFile, delete, mkdir, mkdirs, rename, createTempFile 
	- Can return false if file exist
	- IOException if volume is full
	- IOError for any other reason (volume is gone)
4.  list, listFiles, listRoots
	- If volume gone or directory does not exist will return null or throw IOError
5. 

java.io.FileDescriptor:

1. read()
	- Can throw IO exception if native read method fails.  There could be a number of IO Exceptions (colume full, volume gone, pefromance, ...)

java.io.FileInputStream:
java.io.FileoutputStream:


	- read() write() will delegate to FileDescriptor.read
	- read(bytes[]...) will use native java.io.FileInputStream.readBytes and need to be instrumented for ...
	- skip, avaliable
	- close()....

java.lang

java.lang.ProcessBuilder
	- start() process start failure or performance issue
	- waitFor() performance or failure (native method)

java.lang.Runtime
	- @see process builder

java.management
	- Can get information about system behavior here....
			
java.lang.Thread
	- Can control thread start. Need to find out if need to do that.

	
java.net

java.net.DatagramSocket
java.net.ServerSocket
java.net.MulticastSocket
	- Constructors for bind, file handles and other socket errors
	- bind(), connect, .....
	- join, leave groups
	
java.net.HttpURLConnection
	- Instrument getResponseCode()
java.net.Inet4Address
java.net.Inet6Address
java.net.InetAddress
java.net.InetSocketAddress
java.net.InterfaceAddress
	- Address resolution and other errors.
	
java.net.NetworkInterface ? 
	- Investigate. Has native methods but unclear what can fail and how.

java.nio.channels
 - Not using files or sockets from before.
 - needs to be separately instrumented.!!!!
 - Need to watch for implementing classes of SocketChannel, etc and instrument them accordinally.

java.rmi.*
	- Seem to be based on Socket facilities and therefore should be ok to just instrument known endpoints for known exceptions

java.sql.*
 - Driver
 - Statement

javax.crypto
	- Entropy in the system

javax.jms.*
javax.mail.*
	- Soacket based, but will need additional instrumentation to simulate various queue related failures.

javax.servlet.*
	- Instrument Servlets to play with incomming parameters, if possible. 

 

 
 
##
# Design.
# 
##

Instrumentation details:

@ BUGS 

1. java.sql.Connection#nativeSQL is failing instrumentation,

Tasks:
1. Instrumentation
	a. Complete Channel instrumentation (done, pending testing)
	b. Go over selected items and choose more carefully what is needed for the first demo. Done. 
	c. Add ability to look at return data of a function and allow user to examine it. Also an ability to change parameters and possibly call alternative methods.
	e. Instrument reflective invocation, within it lookup a spec based on the parameter/instance
	f. Implement interface based injection. (done)
	g. Interface and Extension detection needs to be fixed.  Interfaces need to get a complete list.  Extension needs to be included
	e. Add factory notion that is where a method is just a factory to another ServerSocket.accept.
	f. Implement object overload key that can call super.equals via invoke special with java.lang.object to make sure that we retain based on object reference and not overwrites,
	
2. Engine
	a. Add StatsHandler trait to the interface set.  Will allow the resource handlres to implement specific stats handling for specific actions.  For examples read() bytes/t
	b. Complete Infrastructure package. Need network details. 
	c. Work on ThreadContext. Need to control activity types.
	   - Monitor call stack
	   - Discover resources
	   - Contextualize control, for example [r1:servlet] ->...->[r2:database]-> ... ->[r3:socket], and then choose control and switch behavior
	   - Apply simulation
	d. Look into resource naming. Consider ComplexName (done) 
	e. Move resource processing from URI to complex name but be able to build URI out of it. (done)
3. 


Sample service exchange format.

1. From instrumented runtime to crash4j consumer.  The service interface should be able to become local or remote.
   a. Stats:
   		Resource vector: [/a/b/c/...], 
   		










	